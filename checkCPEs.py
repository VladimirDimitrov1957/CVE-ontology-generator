"""CPE Check.

The program check CPE dictionary for consistency with CPE Feeds.
For CPEs that absent in CPE dictionary, additional ontology is generated.
"""

import urllib.request, os, zipfile, json, jsonschema, shutil, re, sys, argparse
from jsonschema import validate
import xml.etree.ElementTree as etree
import xmlschema
from datetime import datetime
from cpe import *

def validateJSON(fn, sn, log = None):
    with open(fn, "r", encoding="utf-8") as inFile:
        data = json.load(inFile)
    with open(sn, "r", encoding="utf-8") as inFile:
        schema = json.load(inFile)
    try:
       validate(data, schema)
    except jsonschema.exceptions.ValidationError as err:
        if log is None:
                print(err)
        else:
                log.write(err)
        return False
    return True      

def escape(s):
        return (s.replace("\\", "\\\\")).replace('"', '\\"')

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--download', action="store_true", help='download input from the Web')
args = parser.parse_args()
print("CPE Check, Version 2.0")
start = datetime.now()
print(start)

ifn = "data/nvdcpematch-1.0.json"
if args.download:
    print("Download CPE Feeds")
    with urllib.request.urlopen("https://nvd.nist.gov/feeds/json/cpematch/1.0/nvdcpematch-1.0.json.zip") as response:
            contents = response.read()
    with open("data/nvdcpematch-1.0.json.zip", mode='wb') as out_file:
            out_file.write(contents)
    with zipfile.ZipFile("data/nvdcpematch-1.0.json.zip", 'r') as zip_ref:
            zip_ref.extractall(path="data")
    print("Load CPE Feeds")
    if not validateJSON(ifn, "data/nvd_cpematch_feed_json_1.0.schema"):
            print("Bad CPE feeds.")
            quit()

with open(ifn, "r", encoding="utf-8") as inFile:
        cpeFeed = json.loads(inFile.read())
cpeSet = set()
for match in cpeFeed["matches"]:
        cpeName = match["cpe_name"]
        if len(cpeName) == 0:
                cpeSet.add(match["cpe23Uri"])
        else:
                for e in cpeName: cpeSet.add(e["cpe23Uri"])

if args.download:
    print("Download CPE Dictionary")
    with urllib.request.urlopen("https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml.zip") as response:
            contents = response.read()
            with open("data/official-cpe-dictionary_v2.3.xml.zip", mode='wb') as out_file:
                    out_file.write(contents)
    with zipfile.ZipFile("data/official-cpe-dictionary_v2.3.xml.zip", 'r') as zip_ref:
        zip_ref.extractall(path="data")

    xs = xmlschema.XMLSchema("data/cpe-dictionary_2.3.xsd")
    if not xs.is_valid("data/official-cpe-dictionary_v2.3.xml"):
            print("CPE Dictionary contents is not valid!")
            xs.validate("data/official-cpe-dictionary_v2.3.xml")
            quit()

tree = etree.parse("data/official-cpe-dictionary_v2.3.xml")
root = tree.getroot()
CPE23Names = set()
for item in root.findall("{http://cpe.mitre.org/dictionary/2.0}cpe-item"):
        cpe23_item = item.find("{http://scap.nist.gov/schema/cpe-extension/2.3}cpe23-item")
        CPE23Names.add(cpe23_item.attrib["name"])

d = cpeSet - CPE23Names

with open("CPEshell.ttl", mode='r', encoding='utf-8') as in_file, open("results/cpeUndefined.ttl", mode='w', encoding='utf-8') as out_file:
    shell = in_file.read()
    out_file.write(shell)

    for fs in d:
        cpe22name = convert_fs_to_compressed_uri(fs)
        ind = "\r###  " + cpe22name + "\n<" + cpe22name + ">\r\trdf:type owl:NamedIndividual ;\r\trdf:type :CPE"
        name_parts = fs.replace("\\:", "\r").split(":")
        for i in range(len(name_parts)):
            name_parts[i] = name_parts[i].replace("\r", "\\:")
            if name_parts[i] and name_parts[i] != "*" and i != 3:
                if name_parts[i] == "-": name_parts[i] = ""
        cpe, cpe_ver, part, vendor, product, version, update, edition, language, SW_edition, target_SW, target_HW, other = name_parts
        if part != "*":
            if part == "a":
                    ind += " ;\r\trdf:type :Application"
            elif part == "o":
                    ind += " ;\r\trdf:type :OS"
            elif part == "h":
                    ind += " ;\r\trdf:type :Hardware"
            elif part == "":
                    ind += " ;\r\trdf:type :NotAHO"
            else:
                    raise ValueError(fs + "=>" + part)
        if vendor != "*": ind += ' ;\r\t:vendor "' + escape(vendor) + '"'
        if product != "*": ind += ' ;\r\t:product "' + escape(product) + "\""
        if version != "*": ind += ' ;\r\t:version "' + escape(version) + '"'
        if update != "*": ind += ' ;\r\t:update "' + escape(update) + '"'
        if edition != "*": ind += ' ;\r\t:edition "' + escape(edition) + '"'
        if language != "*": ind += ' ;\r\t:language "' + escape(language) + '"'
        if SW_edition != "*": ind += ' ;\r\t:SW_edition "' + escape(SW_edition) + '"'
        if target_SW != "*": ind += ' ;\r\t:target_SW "' + escape(target_SW) + '"'
        if target_HW != "*": ind += ' ;\r\t:target_HW "' + escape(target_HW) + '"'
        if other != "*": ind += ' ;\r\t:other "' + escape(other) + '"'
        out_file.write(ind + " ;\r\trdf:type owl:Thing .\r")

end = datetime.now()
print(end)
print(f"CPE Check Elapsed: {end - start}")
